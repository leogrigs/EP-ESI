require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/posts', type: :request do
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  usuario_atual = User.first_or_create!(email: 'lbaccarincosta@usp.br', password: 'password', password_confirmation: 'password')



-- parametro valido
  let(:atributo_oks) do
    {
      'id' => '1',
      'title' => 'Teste',
      'body' => '12345',
      'user' => usuario_atual
    }
  end


-- parametro invalido
  let(:inatributo_oks) do
    {
      'id' => 'a',
      'title' => '1',
      'body' => '1234'
    }
  end

  describe 'GET /login' do
    it 'logou com sucesso' do
      post = Post.new(atributo_oks)
      post.user = usuario_atual
      post.save
      get posts_url
      expect(response).to be_successful
    end
  end


  describe 'GET /novo' do
    it 'criou uma nova conta' do
      get new_post_url
      expect(response).to be_successful
    end
  end

  describe 'GET /editar' do
    it 'editou dados de login' do
      post = Post.new(atributo_oks)
      post.user = current_user
      post.save
      get edit_post_url(post)
      expect(response).to be_successful
    end
  end




  describe 'POST /create' do
    context 'criar conta com sucesso' do
      it 'criou um novo post' do
        expect do
          post = Post.new(atributo_oks)
          post.user = usuario_atual
          post.save
          post posts_url, params: { post: atributo_oks }
        end.to change(Post, :count).by(1)
      end

      it 'redireciona para o post criado' do
        post posts_url, params: { post: atributo_oks }
        expect(response).to be_successful
      end
    end

    context 'tentou criar post com parametros invalidos' do
      it 'nao permitir que crie um novo post' do
        expect do
          post posts_url, params: { post: inatributo_oks }
        end.to change(Post, :count).by(0)
      end
    end
  end

  describe 'PATCH /update' do
    context 'atualizar com parametros validos' do
      let(:new_attributes) do
        {
          'id' => '1',
          'title' => 'Test',
          'body' => '12345',
          'user' => usuario_atual
        }
      end

      it 'atualiza o post desejado' do
        post = Post.new(atributo_oks)
        post.user = usuario_atual
        post.save
        patch post_url(post), params: { post: new_attributes }
        post.reload
      end

      it 'redireciona para o post' do
        post = Post.new(atributo_oks)
        post.user = usuario_atual
        post.save
        patch post_url(post), params: { post: new_attributes }
        post.reload
        expect(response).to redirect_to(post_url(post))
      end
    end

  end

  describe 'DELETE /destroy' do
    it 'apagar o post' do
      post = Post.new(atributo_oks)
      post.user = current_user
      post.save
      expect do
        delete post_url(post)
      end.to change(Post, :count).by(-1)
    end

    it 'redireciona para a lista de posts restantes' do
      post = Post.new(atributo_oks)
      post.user = current_user
      post.save
      delete post_url(post)
      expect(response).to redirect_to(posts_url)
    end
  end
end
